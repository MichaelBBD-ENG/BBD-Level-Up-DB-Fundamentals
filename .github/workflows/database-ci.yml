name: Database Infrastructure üê≥ & Migration CI ‚úàÔ∏èüß™

on:
  push:
    branches: ["main"]
    paths:
      - "sql/**"
      - ".github/workflows/database-ci.yml"
      - "flyway.toml"
  workflow_dispatch:

jobs:
  deploy:
    name: üê≥ Deploy RDS Instance 
    runs-on: ubuntu-latest
    
    concurrency:
      group: ${{ github.workflow }}-deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4
      
      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: üîç Check if RDS instance exists
        id: check-rds
        run: |
          if aws rds describe-db-instances --db-instance-identifier ${{ secrets.DB_INSTANCE_IDENTIFIER }} > /dev/null 2>&1; then
            echo "DB_EXISTS=true" >> $GITHUB_ENV
          else
            echo "DB_EXISTS=false" >> $GITHUB_ENV
          fi
      
      - name: üöÄ Create RDS Postgres Server instance
        if: env.DB_EXISTS == 'false'
        run: |
          aws rds create-db-instance \
              --db-instance-identifier ${{ secrets.DB_INSTANCE_IDENTIFIER }} \
              --db-instance-class ${{ secrets.DB_INSTANCE_CLASS }} \
              --engine ${{ secrets.DB_ENGINE }} \
              --db-name ${{ secrets.DB_NAME }} \
              --allocated-storage ${{ secrets.DB_STORAGE }} \
              --master-username ${{ secrets.DB_USERNAME }} \
              --master-user-password ${{ secrets.DB_PASSWORD }} \
              --backup-retention-period 7 \
              --no-multi-az \
              --publicly-accessible \
              --vpc-security-group-ids ${{ secrets.DB_SECURITY_GROUP_ID }} \
              --db-subnet-group-name ${{ secrets.DB_SUBNET_GROUP }} 

      - name: ‚è≥ Wait for RDS to be available
        if: env.DB_EXISTS == 'false'
        run: |
          echo "Waiting for RDS instance to be available..."
          aws rds wait db-instance-available --db-instance-identifier ${{ secrets.DB_INSTANCE_IDENTIFIER }}

  migrate:
    name: ‚úàÔ∏èüß™ Run Database Migrations
    needs: deploy
    runs-on: ubuntu-latest
    
    concurrency:
      group: ${{ github.workflow }}-migrate-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4

      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: üìç Get RDS Endpoint
        id: get-endpoint
        run: |
          ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier ${{ secrets.DB_INSTANCE_IDENTIFIER }} --query 'DBInstances[0].Endpoint.Address' --output text)
          echo "RDS_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV

      - name: ‚úÖ Validate Flyway migrations
        id: validate
        continue-on-error: true
        run: |
          docker run --rm \
          -v $(pwd)/sql:/flyway/sql \
          flyway/flyway validate \
          -url="jdbc:postgresql://${{ env.RDS_ENDPOINT }}:5432/${{ secrets.DB_NAME }}" \
          -user=${{ secrets.DB_USERNAME }} \
          -password=${{ secrets.DB_PASSWORD }} \
          -configFiles=flyway.toml \
          -driver=org.postgresql.Driver

      - name: üõë Fail if validation failed
        if: steps.validate.outcome == 'failure'
        run: |
          echo "Migration validation failed! Please check your migration files."
          exit 1

      - name: ‚ÑπÔ∏è Show migration info
        if: always()
        run: |
          docker run --rm \
          -v $(pwd)/sql:/flyway/sql \
          flyway/flyway info \
          -url="jdbc:postgresql://${{ env.RDS_ENDPOINT }}:5432/${{ secrets.DB_NAME }}" \
          -user=${{ secrets.DB_USERNAME }} \
          -password=${{ secrets.DB_PASSWORD }} \
          -configFiles=flyway.toml \
          -driver=org.postgresql.Driver

      - name: üîÑ Run Flyway migrations
        id: migration
        run: |
          docker run --rm \
          -v $(pwd)/sql:/flyway/sql \
          flyway/flyway migrate \
          -url="jdbc:postgresql://${{ env.RDS_ENDPOINT }}:5432/${{ secrets.DB_NAME }}" \
          -user=${{ secrets.DB_USERNAME }} \
          -password=${{ secrets.DB_PASSWORD }} \
          -configFiles=flyway.toml \
          -driver=org.postgresql.Driver

      - name: ‚ÑπÔ∏è Show migration info
        if: always()
        run: |
          docker run --rm \
          -v $(pwd)/sql:/flyway/sql \
          flyway/flyway info \
          -url="jdbc:postgresql://${{ env.RDS_ENDPOINT }}:5432/${{ secrets.DB_NAME }}" \
          -user=${{ secrets.DB_USERNAME }} \
          -password=${{ secrets.DB_PASSWORD }} \
          -configFiles=flyway.toml \
          -driver=org.postgresql.Driver