name: Deploy Database to AWS RDS & Run Flyway Migration

on:
    push:
        branches:
            - main

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v2
          
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
              with: 
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION }}
            
            - name: Check if RDS instance exists
              run: |
                # Echoing RDS details to debug
                echo "$(aws rds describe-db-instances --db-instance-identifier ${{ secrets.DB_INSTANCE_IDENTIFIER }} --query 'DBInstances[0].[PubliclyAccessible,Endpoint.Address,VpcSecurityGroups]')"
                if aws rds describe-db-instances --db-instance-identifier ${{ secrets.DB_INSTANCE_IDENTIFIER }} > /dev/null 2>&1; then
                    echo "DB_EXISTS=true" >> $GITHUB_ENV
                else
                    
                    echo "DB_EXISTS=false" >> $GITHUB_ENV
                fi
            
            - name: Create RDS Postgres Server instance if not exists
              if: env.DB_EXISTS == 'false'
              run: |
                set -x
                echo "Creating RDS instance with identifier: ${{ secrets.DB_INSTANCE_IDENTIFIER }}"
                aws rds create-db-instance \
                    --db-instance-identifier ${{ secrets.DB_INSTANCE_IDENTIFIER }} \
                    --db-instance-class ${{ secrets.DB_INSTANCE_CLASS }} \
                    --engine ${{ secrets.DB_ENGINE }} \
                    --db-name ${{ secrets.DB_NAME }} \
                    --allocated-storage ${{ secrets.DB_STORAGE }} \
                    --master-username ${{ secrets.DB_USERNAME }} \
                    --master-user-password ${{ secrets.DB_PASSWORD }} \
                    --backup-retention-period 7 \
                    --no-multi-az \
                    --publicly-accessible \
                    --vpc-security-group-ids ${{ secrets.DB_SECURITY_GROUP_ID }} \
                    --db-subnet-group-name ${{ secrets.DB_SUBNET_GROUP }} 

            - name: Wait for RDS to be available
              if: env.DB_EXISTS == 'false'
              run: |
                echo "Waiting for RDS instance to be available..."
                aws rds wait db-instance-available --db-instance-identifier ${{ secrets.DB_INSTANCE_IDENTIFIER }}
            
            - name: Get RDS Endpoint
              run: |
                ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier ${{ secrets.DB_INSTANCE_IDENTIFIER }} --query 'DBInstances[0].Endpoint.Address' --output text)
                echo "RDS_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV

            - name: Debug Connection String
              run: |
                echo "jdbc:postgresql://${{ env.RDS_ENDPOINT }}:5432/${{ secrets.DB_NAME }}"
              
            - name: List contents of the repository after checkout
              run: |
                  echo "Repository contents:"
                  ls -R $(pwd)
              
              
            
            - name: Run Flyway migrations
              run: |
                docker run --rm \
                -v $(pwd)/sql:/flyway/sql \
                flyway/flyway -X migrate \
                -url="jdbc:postgresql://${{ env.RDS_ENDPOINT }}:5432/${{ secrets.DB_NAME }}" \
                -user=${{ secrets.DB_USERNAME }} \
                -password=${{ secrets.DB_PASSWORD }} \
                -locations=filesystem:/flyway/sql \
                -driver=org.postgresql.Driver
